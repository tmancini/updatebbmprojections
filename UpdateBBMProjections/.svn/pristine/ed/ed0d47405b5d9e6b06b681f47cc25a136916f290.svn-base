package dbp.client;

import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.math.BigDecimal;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JFormattedTextField;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.SwingConstants;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import com.jgoodies.forms.factories.FormFactory;
import com.jgoodies.forms.layout.ColumnSpec;
import com.jgoodies.forms.layout.FormLayout;
import com.jgoodies.forms.layout.RowSpec;
import dbp.common.Constants;
import dbp.server.DBPDK;
import dbp.server.Player;
import dbp.server.Team;

public class DBPDKPanel {

  private JFrame frame;
  private DisabledGlassPane glassPane;
  private FilteredComboBox<String> pgComboBox;
  private FilteredComboBox<String> sgComboBox;
  private FilteredComboBox<String> gComboBox;
  private FilteredComboBox<String> sfComboBox;
  private FilteredComboBox<String> pfComboBox;
  private FilteredComboBox<String> fComboBox;
  private FilteredComboBox<String> cComboBox;
  private FilteredComboBox<String> uComboBox;

  private DBPDK dbpdk;
  private JFormattedTextField minRatioField;
  private JFormattedTextField minValueField;
  private JRadioButton useTotalValueButton;
  private JRadioButton useTotalCompButton;
  private JRadioButton useTotalAverageButton;
  private final ButtonGroup buttonGroup = new ButtonGroup();

  public final static int NAME_COLUMN = 0;
  public final static int OPP_COLUMN = 1;
  public final static int PRICE_COLUMN = 2;
  public final static int RATIO_COLUMN = 3;
  public final static int VALUE_COLUMN = 4;
  public final static int COMP_VALUE_COLUMN = 5;
  public final static int EASE_COLUMN = 6;

  private final String[] columnNames = {"Player", "Opp", "Price", "Ratio", "Value", "Comp Value", "Ease"};

  /**
   * Launch the application.
   */
  public static void main(String[] args) {
    EventQueue.invokeLater(new Runnable() {
      public void run() {
        try {
          DBPDKPanel window = new DBPDKPanel();
          window.frame.setVisible(true);
// window.updateProjectionsAndFillComboBoxes();
        }
        catch(Exception e) {
          e.printStackTrace();
        }
      }
    });
  }

  /**
   * Create the application.
   */
  public DBPDKPanel() {
    initialize();
  }

  public JFrame getFrame() {
    return frame;
  }

  public DisabledGlassPane getGlassPane() {
    return glassPane;
  }

  /**
   * Initialize the contents of the frame.
   */
  private void initialize() {
    frame = new JFrame();
    frame.setTitle("Daily Basketball Projector");
    frame.setSize(640, 480);
    frame.setLocationRelativeTo(null);
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    glassPane = new DisabledGlassPane();
    frame.setGlassPane(glassPane);
    frame.getContentPane().setLayout(
        new FormLayout(new ColumnSpec[] {FormFactory.RELATED_GAP_COLSPEC, FormFactory.DEFAULT_COLSPEC, FormFactory.RELATED_GAP_COLSPEC,
                                         ColumnSpec.decode("left:default"), ColumnSpec.decode("8dlu"), FormFactory.DEFAULT_COLSPEC,
                                         FormFactory.RELATED_GAP_COLSPEC, ColumnSpec.decode("default:grow"),
                                         FormFactory.RELATED_GAP_COLSPEC, FormFactory.DEFAULT_COLSPEC,},
            new RowSpec[] {FormFactory.RELATED_GAP_ROWSPEC, FormFactory.DEFAULT_ROWSPEC, FormFactory.RELATED_GAP_ROWSPEC,
                           FormFactory.DEFAULT_ROWSPEC, FormFactory.RELATED_GAP_ROWSPEC, FormFactory.DEFAULT_ROWSPEC,
                           FormFactory.RELATED_GAP_ROWSPEC, FormFactory.DEFAULT_ROWSPEC, FormFactory.RELATED_GAP_ROWSPEC,
                           FormFactory.DEFAULT_ROWSPEC, FormFactory.RELATED_GAP_ROWSPEC, FormFactory.DEFAULT_ROWSPEC,
                           FormFactory.RELATED_GAP_ROWSPEC, FormFactory.DEFAULT_ROWSPEC, FormFactory.RELATED_GAP_ROWSPEC,
                           FormFactory.DEFAULT_ROWSPEC, FormFactory.RELATED_GAP_ROWSPEC, FormFactory.DEFAULT_ROWSPEC,
                           FormFactory.RELATED_GAP_ROWSPEC, FormFactory.DEFAULT_ROWSPEC, FormFactory.RELATED_GAP_ROWSPEC,
                           FormFactory.DEFAULT_ROWSPEC, FormFactory.RELATED_GAP_ROWSPEC, FormFactory.DEFAULT_ROWSPEC,
                           FormFactory.RELATED_GAP_ROWSPEC, FormFactory.DEFAULT_ROWSPEC, FormFactory.RELATED_GAP_ROWSPEC,
                           FormFactory.DEFAULT_ROWSPEC, FormFactory.RELATED_GAP_ROWSPEC, FormFactory.DEFAULT_ROWSPEC,
                           FormFactory.RELATED_GAP_ROWSPEC, FormFactory.DEFAULT_ROWSPEC,}));

    JLabel lblPg = new JLabel("PG:");
    frame.getContentPane().add(lblPg, "2, 2, right, default");

    pgComboBox = new FilteredComboBox<String>();
    frame.getContentPane().add(pgComboBox, "4, 2, fill, default");

    JLabel lblSg = new JLabel("SG:");
    frame.getContentPane().add(lblSg, "2, 4, right, default");

    sgComboBox = new FilteredComboBox<String>();
    frame.getContentPane().add(sgComboBox, "4, 4, fill, default");

    JLabel lblSg2 = new JLabel("G:");
    frame.getContentPane().add(lblSg2, "2, 6, right, default");

    gComboBox = new FilteredComboBox<String>();
    frame.getContentPane().add(gComboBox, "4, 6, fill, default");

    JLabel lblSf = new JLabel("SF:");
    frame.getContentPane().add(lblSf, "2, 8, right, default");

    sfComboBox = new FilteredComboBox<String>();
    frame.getContentPane().add(sfComboBox, "4, 8, fill, default");

    JLabel lblF = new JLabel("F:");
    frame.getContentPane().add(lblF, "2, 12, right, default");

    fComboBox = new FilteredComboBox<String>();
    frame.getContentPane().add(fComboBox, "4, 12, fill, default");

    JLabel lblC = new JLabel("C:");
    frame.getContentPane().add(lblC, "2, 14, right, default");

    cComboBox = new FilteredComboBox<String>();
    frame.getContentPane().add(cComboBox, "4, 14, fill, default");

    JLabel lblU = new JLabel("U:");
    frame.getContentPane().add(lblU, "2, 16, right, default");

    uComboBox = new FilteredComboBox<String>();
    frame.getContentPane().add(uComboBox, "4, 16, fill, default");

    useTotalValueButton = new JRadioButton("Use Total Value");
    useTotalValueButton.setHorizontalAlignment(SwingConstants.RIGHT);
    useTotalValueButton.setHorizontalTextPosition(SwingConstants.LEFT);
    useTotalValueButton.setSelected(true);
    buttonGroup.add(useTotalValueButton);
    frame.getContentPane().add(useTotalValueButton, "6, 8");

    JLabel lblPf = new JLabel("PF:");
    frame.getContentPane().add(lblPf, "2, 10, right, default");

    pfComboBox = new FilteredComboBox<String>();
    frame.getContentPane().add(pfComboBox, "4, 10, fill, default");

    useTotalCompButton = new JRadioButton("Use Total Comp Value");
    useTotalCompButton.setHorizontalAlignment(SwingConstants.RIGHT);
    useTotalCompButton.setHorizontalTextPosition(SwingConstants.LEFT);
    buttonGroup.add(useTotalCompButton);
    frame.getContentPane().add(useTotalCompButton, "6, 10");

    useTotalAverageButton = new JRadioButton("Use Total Average");
    useTotalAverageButton.setHorizontalAlignment(SwingConstants.RIGHT);
    useTotalAverageButton.setHorizontalTextPosition(SwingConstants.LEFT);
// useTotalAverageButton.setSelected(true);

    buttonGroup.add(useTotalAverageButton);
    frame.getContentPane().add(useTotalAverageButton, "6, 12");

    JLabel lblMinRatioPer = new JLabel("Minimum Ratio Per Player:");
    frame.getContentPane().add(lblMinRatioPer, "6, 2, right, default");

    NumberFormat ratioFormat = NumberFormat.getNumberInstance();
    ratioFormat.setMaximumIntegerDigits(2);
    ratioFormat.setMinimumIntegerDigits(1);
    ratioFormat.setMaximumFractionDigits(2);
    ratioFormat.setMinimumFractionDigits(2);

    minRatioField = new JFormattedTextField(ratioFormat);
    minRatioField.setValue(Constants.DK_RATIO_THRESHOLD);
    minRatioField.setColumns(5);
    frame.getContentPane().add(minRatioField, "8, 2, left, default");

    JLabel lblMinimumValuePer = new JLabel("Minimum Value Per Player:");
    frame.getContentPane().add(lblMinimumValuePer, "6, 4, right, default");

    NumberFormat valueFormat = NumberFormat.getNumberInstance();
    valueFormat.setMaximumIntegerDigits(2);
    valueFormat.setMinimumIntegerDigits(1);
    valueFormat.setMaximumFractionDigits(2);
    valueFormat.setMinimumFractionDigits(2);

    minValueField = new JFormattedTextField(valueFormat);
    minValueField.setValue(Constants.DK_VALUE_THRESHOLD);
    minValueField.setColumns(5);
    frame.getContentPane().add(minValueField, "8, 4, left, default");

    JButton btnUpdateProjections = new JButton("Update Projections");
    btnUpdateProjections.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        updateProjectionsAndFillComboBoxes();
      };
    });

    frame.getContentPane().add(btnUpdateProjections, "4, 32");

    JButton btnCreateTeams = new JButton("Create Teams");
    btnCreateTeams.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent arg0) {
        createTeams();
      }
    });
    frame.getContentPane().add(btnCreateTeams, "6, 32");
// frame.getGlassPane().setVisible(true);
  }

  void addPlayersToComboBox(FilteredComboBox<String> comboBox, List<Player> playerList) {
    comboBox.removeAllItems();
    comboBox.addItem("");

    Collections.sort(playerList, Player.getComparator('V'));
    for(Player player : playerList) {
      comboBox.addItem(player.getName());
    }
  }

  List<String> getReqPlayers(FilteredComboBox<String> comboBox) {
    List<String> reqPlayers = new ArrayList<String>();
    if(!((String)comboBox.getSelectedItem()).trim().isEmpty()) {
      reqPlayers.add(((String)comboBox.getSelectedItem()));
    }
    return reqPlayers;
  }

  void createTeams() {
    final JFrame teamsFrame = new JFrame("Teams By "
        + (useTotalValueButton.isSelected() ? "Total Value" : useTotalCompButton.isSelected() ? "Total Comp Value" : "Total Average"));
    final DisabledGlassPane teamsGlassPane = new DisabledGlassPane();
    teamsFrame.setGlassPane(teamsGlassPane);
    teamsFrame.getContentPane().setLayout(new BorderLayout());
    teamsFrame.setSize(640, 480);
    teamsFrame.setLocationRelativeTo(getFrame());
    teamsFrame.setVisible(true);
    teamsGlassPane.activate("Creating teams...");

    new Thread(new Runnable() {
      @Override
      public void run() {
        if(dbpdk == null) {
          dbpdk = new DBPDK();
        }

        Map<String, List<String>> reqPlayers = new HashMap<String, List<String>>();
        reqPlayers.put(Constants.PG, getReqPlayers(pgComboBox));
        reqPlayers.put(Constants.SG, getReqPlayers(sgComboBox));
        reqPlayers.put(Constants.G, getReqPlayers(gComboBox));
        reqPlayers.put(Constants.SF, getReqPlayers(sfComboBox));
        reqPlayers.put(Constants.PF, getReqPlayers(pfComboBox));
        reqPlayers.put(Constants.F, getReqPlayers(fComboBox));
        reqPlayers.put(Constants.C, getReqPlayers(cComboBox));
        reqPlayers.put(Constants.U, getReqPlayers(uComboBox));
        final List<Team> teams = dbpdk.createTeams(reqPlayers, new BigDecimal(minRatioField.getText()),
            new BigDecimal(minValueField.getText()), useTotalValueButton.isSelected() ? 'V' : useTotalCompButton.isSelected() ? 'C' : 'A');

        EventQueue.invokeLater(new Runnable() {
          public void run() {
            try {
              JTextArea teamTextArea = new JTextArea();
              teamTextArea.setEditable(false);
              for(Team team : teams) {
                for(String line : team.printTeamStrings()) {
                  teamTextArea.append(line);
                  teamTextArea.append("\n");
                }
              }
              JScrollPane teamsScrollPane = new JScrollPane(teamTextArea, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
                  JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
              teamsFrame.getContentPane().add(teamsScrollPane, BorderLayout.CENTER);
              teamsFrame.repaint();
              teamsFrame.validate();
              teamsGlassPane.deactivate();
            }
            catch(Exception e) {
              e.printStackTrace();
            }
          }
        });
      }
    }).start();
  }

  void updateProjectionsAndFillComboBoxes() {
    getGlassPane().activate("Updating Projections...");
    new Thread(new Runnable() {
      @Override
      public void run() {
        if(dbpdk == null) {
          dbpdk = new DBPDK();
        }
        final Map<String, List<Player>> playerMap = dbpdk.getPlayerMap(new BigDecimal(minRatioField.getText()), new BigDecimal(
            minValueField.getText()));

        if(!playerMap.isEmpty()) {
          EventQueue.invokeLater(new Runnable() {
            public void run() {
              try {
                addPlayersToComboBox(pgComboBox, playerMap.get(Constants.PG));
                addPlayersToComboBox(sgComboBox, playerMap.get(Constants.SG));
                addPlayersToComboBox(gComboBox, playerMap.get(Constants.G));
                addPlayersToComboBox(sfComboBox, playerMap.get(Constants.SF));
                addPlayersToComboBox(pfComboBox, playerMap.get(Constants.PF));
                addPlayersToComboBox(fComboBox, playerMap.get(Constants.F));
                addPlayersToComboBox(cComboBox, playerMap.get(Constants.C));
                addPlayersToComboBox(uComboBox, playerMap.get(Constants.U));
                getGlassPane().deactivate();

                JTabbedPane tabbedPane = new JTabbedPane();
                tabbedPane.addTab(Constants.PG, getPositionTable(playerMap.get(Constants.PG)));
                tabbedPane.addTab(Constants.SG, getPositionTable(playerMap.get(Constants.SG)));
                tabbedPane.addTab(Constants.G, getPositionTable(playerMap.get(Constants.G)));
                tabbedPane.addTab(Constants.SF, getPositionTable(playerMap.get(Constants.SF)));
                tabbedPane.addTab(Constants.PF, getPositionTable(playerMap.get(Constants.PF)));
                tabbedPane.addTab(Constants.F, getPositionTable(playerMap.get(Constants.F)));
                tabbedPane.addTab(Constants.C, getPositionTable(playerMap.get(Constants.C)));
                tabbedPane.addTab(Constants.U, getPositionTable(playerMap.get(Constants.U)));

                JFrame playersFrame = new JFrame("Players");
                playersFrame.getContentPane().setLayout(new BorderLayout());
                playersFrame.setSize(640, 480);
                playersFrame.setLocationRelativeTo(getFrame());
                playersFrame.getContentPane().add(tabbedPane, BorderLayout.CENTER);
                // getGlassPane().deactivate();
                playersFrame.setVisible(true);
              }
              catch(Exception e) {
                e.printStackTrace();
              }
            }
          });
        }
        else {
          getGlassPane().deactivate();
          JOptionPane.showMessageDialog(frame, "An error occured while updating projections!", "Error", JOptionPane.ERROR_MESSAGE);
        }
      }
    }).start();
  }

  private JScrollPane getPositionTable(List<Player> playerList) {
    Object[][] data = new Object[playerList.size()][6];
    int rowNum = 0;
    for(Player player : playerList) {
      Object[] playerRow = {player.getName(), player.getOpponent(), player.getPrice(), player.getRatio(), player.getValue(),
                            player.getCompValue(), player.getEase()};
      data[rowNum++] = playerRow;
    }

    JTable table = new JTable(data, columnNames);
    TableColumn playerColumn = table.getColumnModel().getColumn(NAME_COLUMN);
    TableColumn oppColumn = table.getColumnModel().getColumn(OPP_COLUMN);
    TableColumn priceColumn = table.getColumnModel().getColumn(PRICE_COLUMN);
    TableColumn ratioColumn = table.getColumnModel().getColumn(RATIO_COLUMN);
    TableColumn valueColumn = table.getColumnModel().getColumn(VALUE_COLUMN);
    TableColumn compValueColumn = table.getColumnModel().getColumn(COMP_VALUE_COLUMN);
    TableColumn easeColumn = table.getColumnModel().getColumn(EASE_COLUMN);

    TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(table.getModel());
    sorter.setComparator(PRICE_COLUMN, new Comparator<BigDecimal>() {
      @Override
      public int compare(BigDecimal o1, BigDecimal o2) {
        return o1.compareTo(o2);
      }
    });
    table.setRowSorter(sorter);

    playerColumn.setPreferredWidth(125);
    ratioColumn.setCellRenderer(new ColorRenderer());
    valueColumn.setCellRenderer(new ColorRenderer());
    compValueColumn.setCellRenderer(new ColorRenderer());
    easeColumn.setCellRenderer(new ColorRenderer());

    return new JScrollPane(table, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
  }
}
