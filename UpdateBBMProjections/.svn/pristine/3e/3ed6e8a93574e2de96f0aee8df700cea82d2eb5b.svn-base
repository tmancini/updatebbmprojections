// Edmunds & Associates, Inc. Copyright (c) 1999
package dbp.client;

import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;

public class FilteredComboBox<T> extends JComboBox<T> {

  private List<T> items = new ArrayList<T>();

  public FilteredComboBox() {
    super();
    this.setEditable(true);

    final JTextField filterField = (JTextField)this.getEditor().getEditorComponent();
    filterField.addKeyListener(new KeyAdapter() {
      // To correctly set the value of the editor if there is only one value in the list after filtering
      @Override
      public void keyPressed(KeyEvent ke) {
        if(ke.getKeyCode() == KeyEvent.VK_ENTER) {
          filterField.setText((String)getSelectedItem());
        }
        else {
          super.keyPressed(ke);
        }
      }

      public void keyReleased(KeyEvent ke) {
        if(ke.getKeyCode() == KeyEvent.VK_ENTER) {
          SwingUtilities.invokeLater(new Runnable() {
            public void run() {
              setPopupVisible(false);
            }
          });
        }
        else if(ke.getKeyCode() != KeyEvent.VK_DOWN && ke.getKeyCode() != KeyEvent.VK_UP) {
          SwingUtilities.invokeLater(new Runnable() {
            public void run() {
              // Trim ending spaces
              filterComboBox(filterField.getText().replaceAll("^\\s+", ""), true);
            }
          });
        }
      }
    });

    filterField.addFocusListener(new FocusListener() {

      @Override
      public void focusGained(FocusEvent arg0) {

      }

      @Override
      public void focusLost(FocusEvent arg0) {
        if(getItems().contains(getSelectedItem())) {
          setSelectedItem((String)getSelectedItem());
        }
        else if(getItemCount() > 0 && !getItems().contains(getSelectedItem())) {
          setSelectedItem((String)getItemAt(0));
        }
      }

    });
  }

  public void filterComboBox(String enteredText, boolean fromKeyListener) {
    List<String> filterArray = new ArrayList<String>();
    for(int i = 0; i < items.size(); i++) {
      if(items.get(i) instanceof String && ((String)items.get(i)).toLowerCase().contains(enteredText.toLowerCase())) {
        filterArray.add((String)items.get(i));
      }
    }
    DefaultComboBoxModel<String> model = (DefaultComboBoxModel<String>)this.getModel();
    model.removeAllElements();
    for(String s : filterArray) {
      model.addElement(s);
    }

    if(fromKeyListener) {
      this.setPopupVisible(false);
      this.setPopupVisible(true);
    }

    JTextField textfield = (JTextField)this.getEditor().getEditorComponent();
    textfield.setText(enteredText);
  }

  @Override
  public void addItem(T item) {
    super.addItem(item);
    items.add(item);
  }

  /**
   * @return the items
   */
  public List<T> getItems() {
    return items;
  }

  /**
   * @param items
   *        the items to set
   */
  public void setItems(List<T> items) {
    this.items = items;
  }

  @Override
  public void removeAllItems() {
    super.removeAllItems();
    this.items = new ArrayList<T>();
  }
}