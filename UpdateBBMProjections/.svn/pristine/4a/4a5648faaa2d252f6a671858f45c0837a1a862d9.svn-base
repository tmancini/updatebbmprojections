package dbp.client;

import java.awt.Color;
import java.awt.Component;
import java.math.BigDecimal;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;

public class ColorRenderer extends DefaultTableCellRenderer {

  private final float LOW_VALUE = new Float(0);
  private final float MID_VALUE = new Float(25);
  private final float HIGH_VALUE = new Float(50);

  private final float LOW_RATIO = new Float(25);
  private final float MID_RATIO = new Float(40);
  private final float HIGH_RATIO = new Float(55);

  private final float LOW_EASE = new Float(-1);
  private final float MID_EASE = new Float(.01);
  private final float HIGH_EASE = new Float(1);

  private final float LOW_ODDS = new Float(0);
  private final float MID_ODDS = new Float(7);
  private final float HIGH_ODDS = new Float(15);

  @Override
  public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
    Component cellComponent = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
    cellComponent.setBackground(getCellColor(value, column));
    return super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
  }

  private Color getCellColor(Object value, int column) {
    try {
      float floatValue = value instanceof BigDecimal ? ((BigDecimal)value).floatValue() : new BigDecimal(
          ((String)value).substring(((String)value).lastIndexOf(" ") + 1)).abs().floatValue();
      Color tempColor;
      switch(column) {
        case DBPPanel.RATIO_COLUMN:
          tempColor = floatValue > MID_RATIO ? Color.GREEN : Color.RED;
          return new Color(tempColor.getRed() / 255, tempColor.getGreen() / 255, tempColor.getBlue() / 255, getOpacity(floatValue, column));
        case DBPPanel.VALUE_COLUMN:
        case DBPPanel.COMP_VALUE_COLUMN:
          tempColor = floatValue > MID_VALUE ? Color.GREEN : Color.RED;
          return new Color(tempColor.getRed() / 255, tempColor.getGreen() / 255, tempColor.getBlue() / 255, getOpacity(floatValue, column));
        case DBPPanel.EASE_COLUMN:
          tempColor = floatValue > MID_EASE ? Color.GREEN : Color.RED;
          return new Color(tempColor.getRed() / 255, tempColor.getGreen() / 255, tempColor.getBlue() / 255, getOpacity(floatValue, column));
        case DBPPanel.ODDS_COLUMN:
          tempColor = floatValue < MID_ODDS ? Color.GREEN : Color.RED;
          return new Color(tempColor.getRed() / 255, tempColor.getGreen() / 255, tempColor.getBlue() / 255, getOpacity(floatValue, column));
        default:
          return Color.WHITE;
      }
    }
    catch(Exception ex) {

    }
    return Color.WHITE;
  }

  private float getOpacity(float value, int column) {
    switch(column) {
      case DBPPanel.RATIO_COLUMN:
        return value == MID_RATIO ? 0 : value > HIGH_RATIO || value < LOW_RATIO ? 1 : value < MID_RATIO ? 1 - value / MID_RATIO : value
            / MID_RATIO - 1;
      case DBPPanel.VALUE_COLUMN:
      case DBPPanel.COMP_VALUE_COLUMN:
        return value == MID_VALUE ? 0 : value > HIGH_VALUE || value < LOW_VALUE ? 1 : value < MID_VALUE ? 1 - value / MID_VALUE : value
            / MID_VALUE - 1;
      case DBPPanel.EASE_COLUMN:
        return value < LOW_EASE || value > HIGH_EASE ? 1 : Math.abs(value);
      case DBPPanel.ODDS_COLUMN:
        return value == MID_ODDS ? 0 : value > HIGH_ODDS || value < LOW_ODDS ? 1 : value < MID_ODDS ? 1 - value / MID_ODDS : value
            / MID_ODDS - 1;
      default:
        return 1;
    }
  }
}
