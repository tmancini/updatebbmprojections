package dbp.client;

import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import com.jgoodies.forms.factories.FormFactory;
import com.jgoodies.forms.layout.ColumnSpec;
import com.jgoodies.forms.layout.FormLayout;
import com.jgoodies.forms.layout.RowSpec;
import dbp.common.Constants;
import dbp.server.DBP;
import dbp.server.Player;
import dbp.server.Team;

public class DBPPanel {

  private JFrame frame;
  private DBP dbp;

  /**
   * Launch the application.
   */
  public static void main(String[] args) {
    EventQueue.invokeLater(new Runnable() {
      public void run() {
        try {
          DBPPanel window = new DBPPanel();
          window.frame.setVisible(true);
        }
        catch(Exception e) {
          e.printStackTrace();
        }
      }
    });
  }

  /**
   * Create the application.
   */
  public DBPPanel() {
    initialize();
  }

  /**
   * Initialize the contents of the frame.
   */
  private void initialize() {
    frame = new JFrame();
    frame.setBounds(100, 100, 640, 480);
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    frame.getContentPane().setLayout(
        new FormLayout(new ColumnSpec[] {FormFactory.RELATED_GAP_COLSPEC, FormFactory.DEFAULT_COLSPEC, FormFactory.RELATED_GAP_COLSPEC,
                                         ColumnSpec.decode("left:default"), FormFactory.RELATED_GAP_COLSPEC, FormFactory.DEFAULT_COLSPEC,
                                         FormFactory.RELATED_GAP_COLSPEC, FormFactory.DEFAULT_COLSPEC,},
            new RowSpec[] {FormFactory.RELATED_GAP_ROWSPEC, FormFactory.DEFAULT_ROWSPEC, FormFactory.RELATED_GAP_ROWSPEC,
                           FormFactory.DEFAULT_ROWSPEC, FormFactory.RELATED_GAP_ROWSPEC, FormFactory.DEFAULT_ROWSPEC,
                           FormFactory.RELATED_GAP_ROWSPEC, FormFactory.DEFAULT_ROWSPEC, FormFactory.RELATED_GAP_ROWSPEC,
                           FormFactory.DEFAULT_ROWSPEC, FormFactory.RELATED_GAP_ROWSPEC, FormFactory.DEFAULT_ROWSPEC,
                           FormFactory.RELATED_GAP_ROWSPEC, FormFactory.DEFAULT_ROWSPEC, FormFactory.RELATED_GAP_ROWSPEC,
                           FormFactory.DEFAULT_ROWSPEC, FormFactory.RELATED_GAP_ROWSPEC, FormFactory.DEFAULT_ROWSPEC,
                           FormFactory.RELATED_GAP_ROWSPEC, FormFactory.DEFAULT_ROWSPEC, FormFactory.RELATED_GAP_ROWSPEC,
                           FormFactory.DEFAULT_ROWSPEC, FormFactory.RELATED_GAP_ROWSPEC, FormFactory.DEFAULT_ROWSPEC,
                           FormFactory.RELATED_GAP_ROWSPEC, FormFactory.DEFAULT_ROWSPEC, FormFactory.RELATED_GAP_ROWSPEC,
                           FormFactory.DEFAULT_ROWSPEC, FormFactory.RELATED_GAP_ROWSPEC, FormFactory.DEFAULT_ROWSPEC,
                           FormFactory.RELATED_GAP_ROWSPEC, FormFactory.DEFAULT_ROWSPEC,}));

    JLabel lblPg = new JLabel("PG:");
    frame.getContentPane().add(lblPg, "2, 2, right, default");

    final JComboBox<String> pg1ComboBox = new JComboBox<String>();
    frame.getContentPane().add(pg1ComboBox, "4, 2, fill, default");

    JLabel label = new JLabel("PG:");
    frame.getContentPane().add(label, "2, 4, right, default");

    final JComboBox<String> pg2ComboBox = new JComboBox<String>();
    frame.getContentPane().add(pg2ComboBox, "4, 4, fill, default");

    JLabel lblSg = new JLabel("SG:");
    frame.getContentPane().add(lblSg, "2, 6, right, default");

    final JComboBox<String> sg1ComboBox = new JComboBox<String>();
    frame.getContentPane().add(sg1ComboBox, "4, 6, fill, default");

    JLabel lblSg2 = new JLabel("SG:");
    frame.getContentPane().add(lblSg2, "2, 8, right, default");

    final JComboBox<String> sg2ComboBox = new JComboBox<String>();
    frame.getContentPane().add(sg2ComboBox, "4, 8, fill, default");

    JLabel lblSf = new JLabel("SF:");
    frame.getContentPane().add(lblSf, "2, 10, right, default");

    final JComboBox<String> sf1ComboBox = new JComboBox<String>();
    frame.getContentPane().add(sf1ComboBox, "4, 10, fill, default");

    JLabel label_2 = new JLabel("SF:");
    frame.getContentPane().add(label_2, "2, 12, right, default");

    final JComboBox<String> sf2ComboBox = new JComboBox<String>();
    frame.getContentPane().add(sf2ComboBox, "4, 12, fill, default");

    JLabel lblPf = new JLabel("PF:");
    frame.getContentPane().add(lblPf, "2, 14, right, default");

    final JComboBox<String> pf1ComboBox = new JComboBox<String>();
    frame.getContentPane().add(pf1ComboBox, "4, 14, fill, default");

    JLabel label_3 = new JLabel("PF:");
    frame.getContentPane().add(label_3, "2, 16, right, default");

    final JComboBox<String> pf2ComboBox = new JComboBox<String>();
    frame.getContentPane().add(pf2ComboBox, "4, 16, fill, default");

    JLabel lblC = new JLabel("C:");
    frame.getContentPane().add(lblC, "2, 18, right, default");

    final JComboBox<String> cComboBox = new JComboBox<String>();
    frame.getContentPane().add(cComboBox, "4, 18, fill, default");

    JButton btnUpdateProjections = new JButton("Update Projections");
    btnUpdateProjections.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        if(dbp == null) {
          dbp = new DBP();
        }
        Map<String, List<Player>> playerMap = dbp.getPlayerMap();

        addPlayersToComboBox(pg1ComboBox, pg2ComboBox, playerMap.get(Constants.PG));
        addPlayersToComboBox(sg1ComboBox, sg2ComboBox, playerMap.get(Constants.SG));
        addPlayersToComboBox(sf1ComboBox, sf2ComboBox, playerMap.get(Constants.SF));
        addPlayersToComboBox(pf1ComboBox, pf2ComboBox, playerMap.get(Constants.PF));
        addPlayersToComboBox(cComboBox, null, playerMap.get(Constants.C));
      }
    });
    frame.getContentPane().add(btnUpdateProjections, "4, 32");

    JButton btnCreateTeams = new JButton("Create Teams");
    btnCreateTeams.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent arg0) {
        if(dbp == null) {
          dbp = new DBP();
        }
        Map<String, List<String>> reqPlayers = new HashMap<String, List<String>>();
        reqPlayers.put(Constants.PG, getReqPlayers(pg1ComboBox, pg2ComboBox));
        reqPlayers.put(Constants.SG, getReqPlayers(sg1ComboBox, sg2ComboBox));
        reqPlayers.put(Constants.SF, getReqPlayers(sf1ComboBox, sf2ComboBox));
        reqPlayers.put(Constants.PF, getReqPlayers(pf1ComboBox, pf2ComboBox));
        reqPlayers.put(Constants.C, getReqPlayers(cComboBox, null));
        List<Team> teams = dbp.createTeams(reqPlayers);
        System.err.println(teams);
      }
    });
    frame.getContentPane().add(btnCreateTeams, "8, 32");
  }

  void addPlayersToComboBox(JComboBox<String> comboBox1, JComboBox<String> comboBox2, List<Player> playerList) {
    comboBox1.addItem("");
    if(comboBox2 != null) {
      comboBox2.addItem("");
    }

    Collections.sort(playerList);
    for(Player player : playerList) {
      comboBox1.addItem(player.getName());
      if(comboBox2 != null) {
        comboBox2.addItem(player.getName());
      }
    }
  }

  List<String> getReqPlayers(JComboBox<String> comboBox1, JComboBox<String> comboBox2) {
    List<String> reqPlayers = new ArrayList<String>();
    if(!((String)comboBox1.getSelectedItem()).trim().isEmpty()) {
      reqPlayers.add(((String)comboBox1.getSelectedItem()));
    }
    if(comboBox2 != null && !((String)comboBox2.getSelectedItem()).trim().isEmpty()) {
      reqPlayers.add(((String)comboBox2.getSelectedItem()));
    }
    return reqPlayers;
  }
}
